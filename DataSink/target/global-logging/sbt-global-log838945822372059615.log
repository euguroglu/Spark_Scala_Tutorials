[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\PC\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\PC\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 62.236ms
[debug]       Load.loadUnit: defsScala took 0.2234ms
[debug] [Loading] Scanning directory C:\Users\PC\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\PC\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.4302 ms
[debug]           Load.resolveProject(global-plugins) took 31.91ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\PC\.sbt\1.0\plugins, plugins: List(<none>))) took 63.3687ms
[debug] [Loading] Done in C:\Users\PC\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 76.9695ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1761ms
[debug]     Load.loadUnit(file:/C:/Users/PC/.sbt/1.0/plugins/, ...) took 144.4111ms
[debug]   Load.apply: load took 281.6767ms
[debug]   Load.apply: resolveProjects took 4.4536ms
[debug]   Load.apply: finalTransforms took 38.2886ms
[debug]   Load.apply: config.delegates took 5.48ms
[debug]   Load.apply: Def.make(settings)... took 245.2969ms
[debug]   Load.apply: structureIndex took 67.3273ms
[debug]   Load.apply: mkStreams took 1.1552ms
[info] loading global plugins from C:\Users\PC\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1852.0565ms
[debug]           Load.loadUnit: plugins took 16.5664ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink\project
[debug]             Load.loadUnit: mkEval took 7.049ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5176 ms
[info] loading settings for project datasink-build from idea.sbt ...
[debug]               Load.resolveProject(datasink-build) took 107.4052ms
[debug]             Load.loadTransitive: finalizeProject(Project(id datasink-build, base: C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink\project, plugins: List(<none>))) took 109.3444ms
[debug] [Loading] Done in C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink\project, returning: (datasink-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1557.7567ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.3246ms
[debug]         Load.loadUnit(file:/C:/Users/PC/Documents/Jupyter/Udemy/Spark_Scala/Program/DataSink/project/, ...) took 1578.4671ms
[debug]       Load.apply: load took 1579.659ms
[debug]       Load.apply: resolveProjects took 0.086ms
[debug]       Load.apply: finalTransforms took 6.2483ms
[debug]       Load.apply: config.delegates took 0.2518ms
[debug]       Load.apply: Def.make(settings)... took 60.4593ms
[debug]       Load.apply: structureIndex took 19.2874ms
[debug]       Load.apply: mkStreams took 0.0018ms
[info] loading project definition from C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2604.6565ms
[debug]     Load.loadUnit: defsScala took 0.0017ms
[debug] [Loading] Scanning directory C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink
[debug]       Load.loadUnit: mkEval took 0.1723ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8635 ms
[info] loading settings for project datasink from build.sbt ...
[debug]         Load.resolveProject(datasink) took 24.1028ms
[debug]       Load.loadTransitive: finalizeProject(Project(id datasink, base: C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink, plugins: List(<none>))) took 27.1856ms
[debug] [Loading] Done in C:\Users\PC\Documents\Jupyter\Udemy\Spark_Scala\Program\DataSink, returning: (datasink)
[debug]     Load.loadUnit: loadedProjectsRaw took 934.2986ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.9816ms
[debug]   Load.loadUnit(file:/C:/Users/PC/Documents/Jupyter/Udemy/Spark_Scala/Program/DataSink/, ...) took 3550.459ms
[debug] Load.apply: load took 3551.5751ms
[debug] Load.apply: resolveProjects took 0.1184ms
[debug] Load.apply: finalTransforms took 16.1555ms
[debug] Load.apply: config.delegates took 0.1875ms
[debug] Load.apply: Def.make(settings)... took 47.5566ms
[debug] Load.apply: structureIndex took 13.3703ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to DataSink (in build file:/C:/Users/PC/Documents/Jupyter/Udemy/Spark_Scala/Program/DataSink/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 6688 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 6688, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to DataSink (in build file:/C:/Users/PC/Documents/Jupyter/Udemy/Spark_Scala/Program/DataSink/)
[debug] > Exec(idea-shell, None, None)
